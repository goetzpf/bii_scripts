
# This software is copyrighted by the
# Helmholtz-Zentrum Berlin fuer Materialien und Energie GmbH (HZB),
# Berlin, Germany.
# The following terms apply to all files associated with the software.
# 
# HZB hereby grants permission to use, copy and modify this
# software and its documentation for non-commercial, educational or
# research purposes provided that existing copyright notices are
# retained in all copies.
# 
# The receiver of the software provides HZB with all enhancements, 
# including complete translations, made by the receiver.
# 
# IN NO EVENT SHALL HZB BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE
# OF THIS SOFTWARE, ITS DOCUMENTATION OR ANY DERIVATIVES THEREOF, EVEN 
# IF HZB HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# HZB SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS"
# BASIS, AND HZB HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS OR MODIFICATIONS.


# generic browsedb patch tool
# started my the Makefile
# This file uses environment variables as input
# 3 statements are known:

# " #CONFIGURE: deactivate_when VARNAME"
# out-comment the following line in the script 
# when the environment variable $VARNAME is set

# " #CONFIGURE: activate_when VARNAME"
# in-comment (activate) the following line in the script 
# when the environment variable $VARNAME is set

# " #CONFIGURE: make_variable VARNAME"
# create this line:
# my $varname= [content of $VARNAME]
# 


use strict;

use File::Spec;
use File::Copy;

my $me= $0;

my $filename= shift @ARGV;

#create_file($filename); # in order to make "make" happy...

my $browsedb_file= change_filepart($filename,'browsedb.pl');


my $bak_filename= make_backup($browsedb_file);

warn "patching $browsedb_file...\n";

process($bak_filename,$browsedb_file);

# set correct file permissions:
chmod 0775, $browsedb_file; 

sub process
  { my($backup,$new)= @_;
    local(*F);
    local(*G);
    open(F,$backup) or die "unable to open $backup";
    open(G,">$new") or die "unable to create $new";

    #warn "BACKUP: $backup\n";
    #warn "NEW: $new\n";

    my $mode;
    my $param;
    while(my $line=<F>)
      { chomp($line);
        if ($mode eq 'activate')
	  { $line=~ s/^(\s*)#/$1/;
	    print G $line,"\n";
	    $mode= undef;
	    next;
	  };
        if ($mode eq 'deactivate')
	  { $line= '# ' . $line;
	    print G $line,"\n";
	    $mode= undef;
	    next;
	  };

	if ($line=~ /#CONFIGURE: (\w+)\s+(\w*)\s*([\$\w]*)/)
	  { 
	    if ($1 eq 'make_variable')
	      { my $env= $2;
	        my $val= $ENV{$env};
		my $varname= $3;
		if (defined $val)
		  { 
		    if ($val!~ /^\"[^\"]*\"$/)
		      { 
		        $val= '"' . $val . '"'; 

		      };

		    print G 'my '.$varname.'= '.$val.";\n";
		    next;
		  };
	      };
	    if ($1 eq 'activate_when')
	      { if ($ENV{$2})
	          { $mode= 'activate'; 
		    next;
		  };
	      };
	    if ($1 eq 'deactivate_when')
	      { if ($ENV{$2})
	          { $mode= 'deactivate'; 
		    next;
		  };
	      };
	  };
	print G $line,"\n";
      };

    close(F);
    close(G);      
  }     

sub make_backup
  { my($path)= @_;

    my $bak_path= gen_bak_filename($path);
    if (!move($path,$bak_path)) # from File::Copy 
      { die "error: renaming $path to $bak_path failed"; };
    return($bak_path);
  }      

sub change_filepart
  { my($path,$new_filename)= @_;

    my ($volume,$directories,$file) = File::Spec->splitpath( $path );

    return(File::Spec->catpath($volume,$directories,$new_filename));
  }

sub gen_bak_filename
  { my($path)= @_;

    my ($volume,$directories,$file) = File::Spec->splitpath( $path );
    if ($file!~ s/\.(.*)/\.bak/)
      { $file.= ".bak"; };

    return(File::Spec->catpath($volume,$directories,$file));
  }

sub create_file
  { my($path)= @_;
    local(*F);
    open(F,">$path") or die "unable to open $path";
    print F "Generated by browsedb_conf.PL";
    close(F);
  }
