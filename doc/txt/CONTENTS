----------------------------------------------------------------------
*Scripts*:
----------------------------------------------------------------------
*accLaunch*:
	launch panels for the BESSY II control system. All
	panels are read-only, so you can not interfere with 
	the control system.

*addPVtoArchiver*:
	script to add a PV to the channel access archiver.

*adl_cvs_diff.pl*:
	show differences between the working and the repository
	version of an dm2k panel (*.adl) file. Supports CVS and
	subversion as version control systems.
	HTML documentation is here: <URL:scripts/adl_cvs_diff.html>

*adlsort.pl*:
	Print dm2k panel (*.adl) files sorted to standard out.
	This can be used to compare two dm2k panel files.
	HTML documentation is here: <URL:scripts/adlsort.html>

*bdns_import.pl*:
	import BESSY device names into the oracle database.
	HTML documentation is here: <URL:scripts/bdns_import.html>

*bdns_lookup.pl*:
	lookup BESSY device names in the oracle database.
	HTML documentation is here: <URL:scripts/bdns_lookup.html>

*browsedb.pl*:
	a perl-script with a graphical user interface to 
        browse the oracle database. The program can be used to view 
	and change data in the database as well as show relations 
	between the tables.

*buds_lookup.pl*:
	lookup BESSY units in the oracle database.

*camonitor_sort.pl*:
	sort and filer files created by the EPICS camonitor command.
	The filtering can be specified with regular expressions.
	This tool is especially useful when many different PV's 
	are monitored at a time.
	HTML documentation is here: <URL:scripts/camonitor_sort.html>

*canlink.pl*:
	encode and decode the lowCAL hardware link as it is 
	used in the BESSY MultiCAN device support for EPICS.
	HTML documentation is here: <URL:scripts/canlink.html>

*cvs_diff.pl*:
	compare versions of a file in a CVS repository. This tool
	can remove emtpy lines and c-comments before comparing.
	HTML documentation is here: <URL:scripts/cvs_diff.html>

*cvsGuru*:
	CVS wrapper script - for ctlguru only

*cvs_log_diff.pl*:
	compares the all log-messages between two revisions or tags
	in a CVS repository. 
	HTML documentation is here: <URL:scripts/cvs_log_diff.html>

*darcs-kompare*:
	start KDE kompare to compare the working copy with the
	repository copy of a file

*darcs-moni*:
	small wrapper around darcs-monitor

*dbcount*:
	count the number of records in a file
	HTML documentation is here: <URL:scripts/dbcount.html>

*dbdiff*:
	display the difference between two *.db files using tkdiff
	HTML documentation is here: <URL:scripts/dbdiff.html>

*dbfilter.pl*:
	A tool to filter db files or to find information in db 
	files. Regular expression matches can be done on 
	record names, record types or values of record-fields.
	Connections between records can be shown, lowCAL and
	SDO CAN links can be decoded.
	HTML documentation is here: <URL:scripts/dbfilter.html>

*dbscan.pl*:
	This script is from Rolf Keitel <rolf@triumf.ca>. It scans
	db and sch files and has lots of options, the most interesting
        being '-d' which searches for 'dangling links'. I.e. it lists
        all records which have links that point somewhere outside the
        given db file (along with the target record). Unfortunately
        does not tell which link field and which target field.
	Note that dbfilter.pl can do the same with it's "--unresolved_links" 
	option.
	HTML documentation is here: <URL:scripts/dbscan.html>

*dbsort*:
	print an EPICS database sorted. Note that dbfilter.pl does exactly
	the same when called with a database file and no options at all.
	HTML documentation is here: <URL:scripts/dbsort.html>

*dbutil.p*:
	A tool that can export oracle database-tables to ASCII files and 
	re-import these files. Useful if you want to change many parts
	of a database-table with your favorite text-editor...
	HTML documentation is here: <URL:scripts/dbutil.html>

*dumpdb*:
	dump a database (*.db) file, one record-name combined with one
	field name in a single line.

*expander.pl*:
	macro expander for text-files. Since this tool allows
	the execution of arbitrary perl-expressions, it is 
	quite powerful and (if you want this) a programming
	language of its own. It features 
	if-statements, complex expressions and for-loops among others.
	This script is a simple application of the expander.pm module.
	HTML documentation is here: <URL:scripts/expander.html>

*filter_can_links.pl*:
	extract CAN links from a .db file (for the 
	BESSY lowCAL protocol). Note that dbfilter.pl can
	do the same with it's "--lowcal" option.
	HTML documentation is here: <URL:scripts/filter_can_links.html>

*flatdb*:
	expands and vdctdb db-file into a "flat" db file. 

*gadgetbrowser*:
	database browser for the new gadget database.

*grab_xkeys.pl*:
	a little X11 utility that displays scan codes of pressed keys.

*grepDb.pl*:
	A tool to search in EPICS-db files. It allows to define regular
	expressions as triggers in its commandline options for record-name, 
	record-type, field-name and field value if a record or a field matches 
	the trigger, it causes a print of the record. To control the printed 
	output there are options to define the record names, record types or 
	field types that have to be printed.
        HTML documentation is here: <URL:scripts/grepDb.html>

*hgen.pl*:
	a header-generator for c and c++.
        HTML documentation is here: <URL:scripts/hgen.html>

*lockGuru*:
	Check and/or create the mutex file lock, probably used together
	with cvsGuru.

*makeDocCommonIndex.pl*:
	create an html index for documentation generated with makeDoc.	

*makeDocPerl.pl*:
	create html documentation for perl scripts that contain
	embedded documentation according to "makeDoc" rules. 

*makeDocTxt.pl*:
	create html documentation for ascii files that contain
	documentation according to "makeDoc" rules. 
        HTML documentation is here: <URL:scripts/makeDocTxt.html>

*makeRegistrar*:
	create EPICS 3.14 registrar code (generates c-code).

*multi-commit.pl*:
	perform multiple commits (cvs|svn|darcs) with a prepared command-file.
        HTML documentation is here: <URL:scripts/multi-commit.html>

*oracle_request*:
	command line tool to make database queries on the oracle database.

*paths2.pl*:
	like paths.pl but uses the global installation directories
	of the bii_scripts project.

*paths.pl*:
	prints commands to set your perl-environment in order to use
	the perl-modules and scripts of bii_scripts 

*pcomp.pl*:
	recursivly compare two directories. Shows which files or directories
	have different dates, different sizes or are missing. The files or 
	directories can be filtered. The kind comparisons can also be filtered.
	Can remove CVS tags or <CR> characters before comparing.
        HTML documentation is here: <URL:scripts/pcomp.html>

*pfind.pl*:
	a perl-script for powerful recursive file pattern search, like
	a recursive grep, but better. Features among other things
        text-file search, c-file search, regular expressions that 
	match across line-ends.
        HTML documentation is here: <URL:scripts/pfind.html>

*rsync-deploy*:
	tool for management for distribution of binary files with.
	The successor of this script is rsync-dist.pl.

*rsync-dist.pl*:
	manages binary distributions to remote servers. No old version
	is ever lost. Uses hard-links to save storage space. Manages
	also symbolic links that point to the distribution directories
	on the server.
        HTML documentation is here: <URL:scripts/rsync-dist.html>

*Sch2db.pl*:
	a perl sch to db converter. Converts capfast(*.sch) files
	to the db file format as it is used in EPICS. This is faster
	and more flexible that the combination of sch2edif and e2db...
	HTML documentation is here: <URL:scripts/Sch2db.html>

*sch_cvs_diff.pl*:
	shows the difference between a modified capfast (*.sch) file
	and it's version on the top-trunk in the cvs repository.
	The difference of the resulting *.db files is shown, which
	is much clearer when you want to find out what was really 
	changed.
        HTML documentation is here: <URL:scripts/sch_cvs_diff.html>

*set_ioc_tsrv.pl*:
	set terminal_server and optionally port to connect to 
	console of an ioc. Probably no longer needed since the
	conserver is now used for all IOCs.
        HTML documentation is here: <URL:scripts/set_ioc_tsrv.html>

*SetPerms*:
	a semi-automatic shell-script for setting file and 
	directory permissions in the CVS repository, in 
	epics, vxworks or development related directories.

*subst2exp.pl*:
	convert substitution-files to expander format for usage
	with the expander.pl script. This can be used on the fly
	as an alternative to EPICS msi, or to convert
	substitution files to expander format in order to use
	the much more powerful commands of the expander format
	when replacing values in EPICS template files. 
        HTML documentation is here: <URL:scripts/subst2exp.html>

*substdiff*:
	compares two substitution files.
        HTML documentation is here: <URL:scripts/substdiff.html>

*substprint.pl*:
	pretty-print a substitution file.
        HTML documentation is here: <URL:scripts/substprint.html>

*tkSQL*:
	query the oracle database by directly entering SQL requests.

*unlockGuru*:
	Remove the mutex file lock, probably used together
	with cvsGuru.

*vdct*:
	starts the VisualDCT database editor.	


----------------------------------------------------------------------
*Libraries and Modules*:
----------------------------------------------------------------------
*analyse_db.pm*:
	a Perl module to analyse databases parsed with parse_db.
        HTML documentation is here: <URL:modules/analyse_db.html>

*BDNS.pm*:
	BESSY device name parser.

*bessy_module.pm*:
	This performs a "module <command> <args...>" in the z-shell 
	environment and re-imports the environment-variables to the 
	perl-process, so they are available in the %ENV-hash
        HTML documentation is here: <URL:modules/bessy_module.html>

*BrowseDB/TkUtils.pm*: 
	Tk-utilities for browsedb.pl

*browsedb_conf.PL*:
	this file is only needed for "make install" in order to 
	patch browsedb.pl. It hat no use, once bii_scripts is installed

*canlink.pm*:
	a perl-module that can be used to encode or decode the
	"cryptic can link" as it is used in the BESSY CAN Bus
	device support for EPICS.
        HTML documentation is here: <URL:modules/canlink.html>

*capfast_defaults.pm*:
	a Perl module that contains capfast defaults for
        record-fields.
        HTML documentation is here: <URL:modules/capfast_defaults.html>

*cfgfile.pm*:
	simple module to read or write a configuration file. Probably
	unfinished and in alpha-release state. 
        HTML documentation is here: <URL:modules/cfgfile.html>

*container.pm*:
	This provides routines to import and export perl variables into 
	a single hash. A map-hash defines what hash-key is connected
	to what variable. Importing and exporting is performed by
	copying scalars, arrays and hashes. This is not a simple copy
	of references. Note that deeply nested structures are
	deeply copied.  
        HTML documentation is here: <URL:modules/container.html>

*CreateX.pm*:
	Routines that help to write CreateX.pl scripts. Not quite sure
	what this does. Connects to the oracle database.
        HTML documentation is here: <URL:modules/CreateX.html>

*dbdrv_lite.pm*:
	low level routines for sqlite. Used by dbdrv.

*dbdrv_oci*:
	low level routines for the ORACLE database. Needed by dbdrv.

*dbdrv_pg.pm*:
	low level routines for a PostgreSQL database. Needed by dbdrv.

*dbdrv*:
	low level utilities for SQL database access, needed by
	dbitable.
        HTML documentation is here: <URL:modules/dbdrv.html>

*dbdrv_test.pl*: 
	test-script for dbdrv. This shouldn't be in the repository!     

*dbitable*:
	an object-oriented Perl module for handling single tables
        from an SQL database
        HTML documentation is here: <URL:modules/dbitable.html>

*expander.pm*:
	a module to perform macro-replacements in text files. Features
	if-statements, complex expressions and for-loops among others
        HTML documentation is here: <URL:modules/expander.html>

*extended_glob.pm*:
	a Perl module for extended filename globbing.
        HTML documentation is here: <URL:modules/extended_glob.html>

*maillike.pm*:
	This module is used to parse and create data files in a 
	format similar to mail (RFC822). The data is organized in
	records, each record has a number of fields and to each 
	field of a record an certain content is associated.
        HTML documentation is here: <URL:modules/maillike.html>

*makeDocStyle.pm*:
	module for the makeDoc* scripts.

*ODB.pm*:
	a Perl module for accessing database via DBI.  Means easier 
	handling of the DBI routines via this layer.
        HTML documentation is here: <URL:modules/ODB.html>

*Options.pm*:
	a Perl module for handling programm arguments, commandline in
        and output inclusive login requests.
        HTML documentation is here: <URL:modules/Options.html>

*parse_db*:
	a perl-module for parsing EPICS db-files.
        HTML documentation is here: <URL:modules/parse_db.html>

*parse_subst*:
	a perl-module for parsing EPICS substitution-files.
        HTML documentation is here: <URL:modules/parse_subst.html>

*Pezca*:
	a perl-module that implements the channel-access protocol
	and gives access to EPICS variables (1)
	HTML documentation available!

*scan_makefile.pm*:
	This module scans one or more than one makefile and returns 
	a hash reference containing all variables that are set within
	the makefile together with all environment variables.
        HTML documentation is here: <URL:modules/scan_makefile.html>

*simpleconf.pm*:
	This module is used to parse and create configuration files
	in a very simple format. The data is typically organized in
	lines where each line contains a field-name and the contents
	of the field. Empty lines and lines starting with a "#" character
	(which are usually a comment) are ignored.
        HTML documentation is here: <URL:modules/simpleconf.html>

-----------------------------------------------------------------------
(1)	This is a CPAN-like module which has to be installed via
	"make". This module needs a working C-compiler in order to
	be installed. The source is in "bii_scipts/src/perl/[module]",
	the documentation in "bii_scipts/doc/man/man3/[module].3",

