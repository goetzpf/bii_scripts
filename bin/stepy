#! /usr/bin/env python
# -*- coding: UTF-8 -*-
"""
==============================
stepy Measure Program
==============================

Stepy is a configurable measure program that preforms loops that set EPICS
process variables (PV) and read a set of process variables after each step.

Features 
==============================

- **Loops** for n dimensions, with the parameters:

  - the parameters: 'FROM, TO, INCREMENT' and 'DELAY' define a loop
  - The outer loop may be defined for single or multiple runs.

..

- **Attatched Process variables:** Each loop may set several PVs

- **Set PV types:**  For each process variable are several types of conversion of
  the loop parameters available.

  - **PV:** set the current loop value.
  - **MOTOR:** set the current loop value and wait until the motor has reached its 
    position.
  - **LINEAR:** Parameter: BEGIN, END. Convert the loop values to the range within
    the parameters for each step.
  - **FUNCTION:** Transform the loop values with a free definable (python syntax)
    function

..

- **Measurement:** Multiple PVs may be measured in each step. The measured values 
  are:

  - displayed in a list
  - may be shown in a StripTool
  - may be stored in a file in .csv format
  - there may be a break condition to break the measurement (-b option)

..

- **GUI Features** :

  - All loops, set and read PVs may be configured by the GUI.
  - Configuration and measured data may be stored to file.

..

- **Run Remarks** :

  - The program can execute the configuration file to perform the
    measurement from command line.::

      stepy -x my.cfg -f measuredData.csv

  - Minimal delay between the steps is approximate 1 second, due to the channel 
    access library.

..

- Restore affected PVs when finishing the program.

  - GUI 'Restore' button
  - Quit GUI: Ask dialog
  - Commandline: allways restore if program finshed

Configuration files
==============================

- **~/.steprc** Set the prepath for data and configuration files::

    { 'DATAPREPATH': "/home/pc/kuner/ctl/tmp/stepData",
      'CFGPREPATH':  "/home/pc/kuner/ctl/tmp/stepConf"
    }

- **xx.cfg** Configure Measurement 

  - The '.cfg' file may contain multiple configurations.
  - The user has to choose one of these configurations while loading the '.cfg' file.
  - In commandline mode a '.cfg' file with just one configuration is executed
    directly, more configurations are choosen interactive or by argument.::  

      stepy -x huhu.cfg 2

- In GUI mode, store a configuration will append it to an existing file, asking 
  for the description before write it. Example::

    {'LOOPS': [{'LTYPE': 'ONCE', 'FROM': 0.0, 'TO': 3.0, 'INC': 1.0, 'DELAY': 0.2, 
    'PVS': [{'TYPE': 'PV', 'PV': 'test:out1'}]}], 'DESC': '21.10.08 13:22 | 1-loop ONCE
    ', 'MEASURE': ['test:read1']}

- **~/.step.stp:** is the temporary created file to start the StripTool with the
  actual parameters.

History
=======

- Version 1.1

  - Col with measure Times
  - break condition in GUI
  - Save data: Append to existing file, don't overwrite
  - Improved configure files - pretty print, not all in one Line
  - X- and Y-scrollable window for measured data
  - Bugfix: Illegal function causes unhandled exception
  - Bugfix: motorPV may miss motor movment

Bugs and Enhancement - TuDu
===========================

- **Features** :

  - set PV with async caput - caput callback
  - PV menus to PV|LIN|FUNC -> Typechoice (pv or motor)

- **Bugs** :

  - start striptool causes setvalues of 'None' - not occured local!
  - Umbau, nur noch LinPV und NrOfSteps
  - Abspeichern von cfg. Files, keine Description ergibt leere Zeile. Beim Laden
    muss die Leere Zeile angeklickt werden - Mist!
"""
import step
import re
#import ca
import time
import sys
#import string
import signal
import pfunc
from types import FunctionType
from optparse import OptionParser
#import threading
#import atexit
import os
#from traceback import *

my_version = "1.1"

def setSignalINT(obj):
    """
    set Signal handler to break measurement with SIGINT 
    """
    def procSig(signum, frame,obj):
#    	print "procSig", signum, type(obj),"\n"
	if signum == 2 and isinstance(obj,step.MeasThread) :
	    obj.stopCmd()
	    if obj.mPvs.fileName is not None:
		print "Write measured Data to file: ",obj.mPvs.fileName
    		obj.mPvs.writeData()
	elif signum == 2 and isinstance(obj,stepView.stepApp) :
	    obj.quitApplication()

    signal.signal(signal.SIGINT,pfunc.ArgFreeze(procSig,None,None,obj) )

setLoops = []	# the measure loop list, set by arguments, config file or an empty object to be setup in GUI
mPvs = None	# measure object, set by arguments, config file or an empty object to be setup in GUI

usage = " %prog [options]"
parser = OptionParser(usage=usage,
		 version="%%prog %s" % my_version,
    		 description="Stepy is a configurable measure program that preforms loops that set EPICS\n\
		 process variables (PV) and read a set of process variables after each step.   \
* stepy -x file.cfg            | run a measure program from commandline             \
* stepy -x file.cfg -w         | start preconfigured GUI                            \
* stepy -x fil.cfg -f file.csv | run a measure program and save data   		    \
* stepy                        | start GUI                                          \
* -b, -n                       | are allready not implemented in the GUI            \
* -l, -s, -M -d                | Simple measure loop  from commandline:             \
* Example: Run motor from 1 to 12, increment 1 break for high limit switch         \
stepy -l 1.0,12,2 -d 0 -s test:mot -M -b 'test:mot.HLS==1' read:sig1 read:sig2"
    		 )
parser.add_option("-f","--file", 
		 action="store",
    		 type="string",
		 help="print measured data to file (overwrite mode!)", 
    		 )

parser.add_option("-x","--execute", 
		 action="store",
    		 type="string",
		 help="load a configuration file and run the loop or start GUI (-w Option)", 
    		 )
parser.add_option("-w","--win",
		 action="store_true", # default: None
		 help="start graphical view", 
    		 )
parser.add_option("-b","--breakIf", 
		 action="store",
    		 type="string",
		 help="break if condition is true e.g. -b 'pv > 5' ", 
    		 )

parser.add_option("-n","--nextIf", 
		 action="store",
    		 type="string",
		 help="next if condition is true e.g. -n 'pv > 5' ", 
    		 )
parser.add_option("-l","--loop", 
		 action="append",
    		 type="string",
		 help="the loop definition: LOOP= 'FROM,TO,INC'", 
    		 )
parser.add_option("-s","--setPV", 
		 action="append",
    		 type="string",
		 help="the PV to be set", 
    		 )

parser.add_option("-M","--Motor",
		 action="store_true", # default: None
		 help="set channel is a motor (motorRecord)", 
    		 )
parser.add_option("-d","--delay",  # implies dest="nodelete"
		 action="store", # default: None
    		 type="float",
		 help="measurement delay time", 
    		 )
parser.add_option("-t","--timestamp",
		 action="store_true", # default: None
		 help="print timestamp for each measurement"
    		 )
parser.add_option("","--doc",
		 action="store_true", # default: None
		 help="print documentation"
    		 )

(options, args) = parser.parse_args()

argDict = {}

# There is a config file in the user home to set this pre paths
steprc = None
import os.path
stepCfgFile = os.environ['HOME']+"/.steprc"

if options.doc is not None:
    print __doc__
    sys.exit(0)

if os.path.isfile(stepCfgFile):
    f = open(os.environ['HOME']+"/.steprc")
    steprc = eval(f.read())
    argDict.update(steprc)
# Process options to define a step run from commandline
if options.timestamp is not None:
    argDict['TIMESTAMP'] = options.timestamp
    print "Timestamp =", options.delay
if options.delay is not None:
    print "Delay =", options.delay

regPvName = re.compile('^\s*([\d\w\.:]+)(.*)$') # 'pvName EXPR, e.g 'MDIZ3T5G:lt50' '< 0.1'
nextifPar = None
if options.nextIf is not None:
    argDict['NEXT'] = step.parseFuncParameter(options.nextIf)

breakifPar = None
if options.breakIf is not None:
    argDict['BREAK'] = step.parseFuncParameter(options.breakIf)

# configure loop by commandline parameters OR..
if options.loop is not None:
    if len(options.loop) == len(options.setPV):
    	argDict['LOOPS'] = []
	for (setPvName,loop) in zip(options.setPV,options.loop) :
	    loopDict = {'LTYPE': 'ONCE','DELAY':0}
	    if options.delay is not None: loopDict['DELAY'] = float(options.delay)

    	    (fromVal,toVal,incVal) = loop.split(',')
    	    loopDict['INC']  = float(incVal)
    	    loopDict['FROM'] = float(fromVal)
    	    loopDict['TO']   = float(toVal)

    	    loopDict['PVS'] = []
	    pvsDict = {'PV':setPvName,'TYPE':'PV'}
    	    if options.Motor is not None: pvsDict['TYPE'] = 'MOTOR'
    	    print "SET ",pvsDict['TYPE'],"=", pvsDict['PV']

    	    loopDict['PVS'].append(pvsDict)
	    argDict['LOOPS'].append(loopDict)

# configure loop by config file - will be executed imdiately unless there is the -w option
elif options.execute is not None:
    cfgList = None
    try:
    	cfgList = step.readConfig(options.execute)
    except SyntaxError, e:
    	step.warnFunc(str(e))
    except IOError, e:
    	step.warnFunc(str(e))

    if cfgList == None:
	sys.exit("Can't read configuration from File:"+options.execute)
    idx = 0
    if len(cfgList) > 1:
    	if len(args) > 0:
	    try :
                idx = int(args[0])
            except ValueError:
	    	pass

	else:
            idx=0
     	    for cfg in cfgList:
     		print idx, "|",cfg['DESC']
     		idx += 1
 	    inp =  raw_input("choose a configuration number (exit=x, show=s <nr>)> ")
 	    try :
 		idx = int(inp)
 	    except ValueError:
 		inpArray = inp.split()
 		print inpArray[0]
 		if inpArray[0] == 's':
 		    try:
 		    	idx = int(inpArray[1])
 		    except ValueError:
 		    	sys.exit()
 		    except IndexError:
 		    	sys.exit()
 		    mPvs = step.measurePvs(cfgList[idx])
 		    print "COMMANDLINE: \n",mPvs
 		sys.exit()
    try:
    	cfg = cfgList[idx]
    except IndexError:
        sys.exit()
    
    argDict = cfg


if options.file is not None:
    mPvs.setFileName(options.file)

if options.win or ( options.loop is None and options.execute is None):
    try:
    	import Tkinter
    	import stepView
    except ImportError, e:
    	print "Don't support GUI: ",e
    	sys.exit()
    root = Tkinter.Tk()
    root.title("Step - Measure Loops")
    argDict['FILENAME'] = options.execute
    guiObj = stepView.stepApp(root,argDict)
    setSignalINT(guiObj)
    step.setWarnFunc(stepView.warn)
    Tkinter.mainloop()
# MEASURE LOOP
else :
    try:
    	mPvs = step.measurePvs(argDict)
    except Exception:
    	sys.exit()
    ms = step.MeasThread(mPvs)
    setSignalINT(ms)
    ms.MeasThreadStart()
#   ms.ms.join()    # join is evil - devours sigINT signal
    while True:
    	time.sleep(1)
    	if ms.getRunControl() == -1 : break
    	
    step.SaveRestore.restoreAll('verbose')

time.sleep(2)

# global used for save-restore of all PVs set by this program
#global saveRestObj
#saveRestObj = step.SaveRestore() 
