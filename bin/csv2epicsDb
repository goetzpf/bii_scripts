#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Bernhard Kuner <bernhard.kuner@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser
import sys
import os
import csv
import os.path
import epicsUtils
import csv2epicsFuncs
import pprint

my_version = "2017.3.15"

#******************************* Main program *******************************

usage        = """* Author  B.Kuner

How to use the spreadsheet table: 

- http://help.bessy.de/apps/common/csv2epicsDb

pydoc to the underlying classes:

- csv2epicsFuncs:  http://www-csr.bessy.de/control/bii_scripts/html/python/csv2epicsFuncs.html
- epicsUtils.html: http://www-csr.bessy.de/control/bii_scripts/html/python/epicsUtils.html

USAGE: csv2epicsDb [-h OPTIONS] csv files """
parser = OptionParser(usage=usage,
                 version="%%prog %s" % my_version,
                 )
parser.add_option("-a","--output_arch", 
                 action="store",
                 type="string",
                 help="archiver config file name for signals defined n Col. O", 
                 )
parser.add_option("-b", "--base", 
                 action="store",
                 type="string",
                 help="EPICS Base, as defined in Makfile Variable $(EPICS_SHORT_VERSION) Default is '3.14.8'"
                 )
parser.add_option("-c","--can", 
                 action="store",
                 type="string",
                 help="CAN port Nr., or 'opc' for OPC server access",
                 )
parser.add_option("-d","--output_db", 
                 action="store",
                 type="string",
                 help="db file name (if Col W empty) file ending determines the ouptut: '.db' or '.substitutions'",
                 )
parser.add_option("-D","--output_multiFile", 
                 action="store_true",
                 help="Tag to write the records/substitutions to the files as set in COL W.",
                 )
parser.add_option("-f","--install_path",
                 action="store",
                 type="string",
                 help="installation path for output files: .substitutions, .arch, .alh, panels. Default is './'", 
                 )
parser.add_option("-i","--iocName", 
                 action="store",
                 type="string",
                 help="IOC name ",
                 )
parser.add_option("-l","--output_alh", 
                 action="store_true",
                 help="create alarm handler config file for Items that define BESSY ALH Group (col. Q, )", 
                 )
parser.add_option("-L","--output_alh_no_group", 
                 action="store_true",
                 help="as -l but without group information to be included in hand written alh file", 
                 )
parser.add_option("-m","--opc_name", 
                 action="store",
                 type="string",
                 help="opc server name", 
                 )
parser.add_option("-n","--devName", 
                 action="store",
                 type="string",
                 help="device name [\(DEVICE)]", 
                 )
parser.add_option("-p","--panel",
                 action="store_true",
                 help="create 'CreatePanel.pl' data for Items that define EPICS devObj.panelName (col. T, )", 
                 )
parser.add_option("-r","--output_req", 
                 action="store",
                 type="string",
                 help="autoSaveRestore request file name for signals defined in Col. P", 
                 )
parser.add_option("-s","--search_path",
                 action="store",
                 type="string",
                 help="Search path for panel widgets and template plugins '.:..:/opt/support/mySup'" ,
                 )
parser.add_option("-t","--separator", 
                 action="store",
                 type="string",
                 help="Column separator in .csv file", 
                 )
parser.add_option("-v","--verbose",
                 action="store_true", # default: None
                 help="Print debug information", 
                 )
parser.add_option("--cmLog",
                 action="store_true", # default: None
                 help="Create alh file for cmlog use: transient alarms that report each state", 
                 )
parser.add_option("--devObj",
                 action="store",
                 type="string",
                 help="Python class module that converts non standard csv data to variables needed by the program",
                 )
parser.add_option("--dis",
                 action="store",
                 type="string",
                 help="Optional name of disable record to be created and used in all SDIS fields",
                 )
parser.add_option("--stoRcl",
                 action="store_true", # default: None
                 help="Optional create store recall records for ao and longout: DEVN:stoSNAME, DEVN:rclSNAME",
                 )
parser.add_option("--var", 
                 action="append",
                 type="string",
                 help="Define variables in the csv file. CSV-file tag: $(VAR) fill with: --var VAR=huhu"
                 )

(options, args) = parser.parse_args()

separator    =','
canOption = ""
install_path = "."
search_path = ".:.."
devName  = ''
if options.separator    is not None: separator    = options.separator
if options.can          is not None: canOption    = options.can
if options.install_path is not None: install_path = options.install_path
if options.search_path  is not None: search_path = options.search_path

if options.base is not None:
    try:
        episBase = epicsUtils.matchRe(options.base,"(\d+\.\d+\.\d+)")[0]
    except TypeError:
        sys.stderr.write( "Error in option --base='"+str(options.base)+"', use default: '3.14.8'" )
    else:
        if not csv2epicsFuncs.baseData.setBase(episBase):
            sys.stderr.write( "Error in option --base='"+str(options.base)+"'. Thise base is not available, use default: '3.14.8'")
        elif options.verbose: print "   Set episBase:",episBase

devModule = None
if options.devObj is not None:
    devModule = None
    pluginPath = ".."
    if not pluginPath in sys.path:
        if options.verbose: print "Insert",pluginPath
        sys.path.insert(0,pluginPath)
    devModule = __import__(os.path.basename(options.devObj)[:-3])
    if options.verbose: print "Import external device object module: '"+pluginPath+"/"+str(devModule)

iocTag = None
if options.iocName is not None:
    try:
        m = epicsUtils.matchRe(options.iocName,"^\w*IO(C[\w\d]+$)")
        iocTag = m[0]
    except TypeError:
        pass

csvVariablesDict = {}
if options.var is not None:
    for opt in options.var:
        (var,val) = opt.split('=')
        csvVariablesDict[var] = val

warnings = []       # global for warnings in all functions, is printed at end of prog.
lines = None
dbgTable = []       # Debug information in verbose mode
arch = []           # archive list
req = []            # autoSaveRestore list
debugInfo = {}

# setup search path for widgets and plugins
display_search_path = []
plugin_search_path = []
for item in search_path.split(':'):
    if item != '.' and item != '..':
        display_search_path.append(item+"/dl")
        plugin_search_path .append(item+"/lib/python")
    else:
        display_search_path.append(item)
        plugin_search_path .append(item)

panelList = epicsUtils.Panels(install_path,display_search_path)
plugins = csv2epicsFuncs.setupPlugins(plugin_search_path)

for argument in args:
    if not os.path.isfile(argument): epicsUtils.die("File doesn't exist: "+argument)

    if options.verbose:
        print "   Reading data from "+argument

    try :
        (fileName,fileExt) = epicsUtils.matchRe(argument.split('/')[-1],'(.*)\.(.*)') 
    except TypeError : 
        epicsUtils.die("found no filename in: "+argument)

    try :
        IN_FILE = open(argument) 
    except IOError: 
        epicsUtils.die("can't open input file: "+argument)
    
    lines = 0
    reader = csv.reader(IN_FILE, delimiter=separator, quotechar='"',quoting=csv.QUOTE_ALL)

    for device in reader:
        try:
            lines += 1
            if lines <= 1: # is header
                continue

            if epicsUtils.matchRe(device[0],r'\f') is not None: # is new page, header assumed
                continue

            # substitute variables in csv data
            device = [epicsUtils.substituteVariables(col,csvVariablesDict) for col in device] 

            devObj = None
            if devModule is None:
                devObj = csv2epicsFuncs.csvData(device,canOption)
                if options.dis: devObj.disableRec = options.dis
            else:
                try:
                    devObj = devModule.myCsvData(device,options)
                except ValueError:
#                   print "ILLEGAL lINE: ", lines, device
                    continue

            if len(devObj.rtype) == 0:  # line is no device
                continue

            if len(devObj.dev)>0:       # override -n option
                devName = devObj.dev
            elif options.devName is not None: 
                devName = options.devName
            else:
                warnings.append([fileName,lines,"ERROR: Missing device name"])

            ## Check if Description exceeds the EPICS String length, truncate it and create warning
            if len(devObj.DESC) > csv2epicsFuncs.baseData.getDESClen():
                warnings.append([fileName,lines,"Truncate DESC",devName+":"+devObj.signal,devObj.DESC[0:csv2epicsFuncs.baseData.getDESClen()]+"<TRUNC>"+devObj.DESC[csv2epicsFuncs.baseData.getDESClen():]])
                devObj.DESC = devObj.DESC[0:csv2epicsFuncs.baseData.getDESClen()]
            
            # use col W if defined output_multiFile, else options.output_db
            if options.output_db and not options.output_multiFile: 
                devObj.dbFileName=options.output_db
            if options.output_multiFile and len(devObj.dbFileName) == 0: 
                warnings.append([fileName,lines,"Missing Filename"])
            
            alhSignals = []             # templates may have a list of signals for alarm handler
            arcSignals = []             # templates may have a list of signals for archiver
            panelDict = {}              # panel widget macro data
            panelNameDict = {}          # panel widget PV name in form of {'TAG':pvName} dictionary
            panelWidgetName = None      # default widget name for this record/template may be overwritten by col.V (Panel Sort)

            # is a record?
            a = csv2epicsFuncs.procRecord(devName,devObj,canOption,options.opc_name,iocTag,warnings,lines,fileName)
            if a:
                (autoSaveRestoreRequest,alhSignals,arcSignals,panelDict,panelNameDict,panelWidgetName) = a

                # Option Store Recall for ao, longout records
                if options.stoRcl and (devObj.rtype == 'ao' or devObj.rtype == 'longout'):
                    li = epicsUtils.epicsTemplate.findObject(devName,{'SNAME':devObj.signal})
                    if len(li) == 1:
                        epicsUtils.epicsTemplate("ai",{'DEVN':devName},{'SNAME':"sto"+devObj.signal,
                            'DESC':"Store",'INP':devName+":"+devObj.signal,
                            'EGU':li[0].field['EGU'],
                            'PREC':li[0].field['PREC']
                            },devObj.dbFileName)
                        epicsUtils.epicsTemplate("ao",{'DEVN':devName},{'SNAME':"rcl"+devObj.signal,
                            'DESC':"Recall",
                            'OUT':devName+":"+devObj.signal+" PP NMS",
                            'DOL':devName+":sto"+devObj.signal+" NPP NMS",
                            'OMSL':'closed_loop',
                            'EGU':li[0].field['EGU'],
                            'PREC':li[0].field['PREC']
                        },devObj.dbFileName)
                req += autoSaveRestoreRequest

            # is a known template?
            elif plugins.has_key(devObj.rtype):
                a = plugins[devObj.rtype](devName,devObj,canOption,options.opc_name,iocTag,warnings,lines,fileName)
                if not a:
                    continue
                (alhSignals,arcSignals,panelDict,panelNameDict,panelWidgetName) = a
                if len(devObj.reqFlag) > 0: 
                    req += map(lambda x: devName+":"+x,devObj.reqFlag.split("|"))
            else:
                warnings.append([fileName,lines,"Skip record/template",devName+":"+devObj.signal,"Unsupported: '"+devObj.rtype+"'"])
                continue
            # END create record/template

            # Now processing is done, an record/substitution is created and we can use the variables, set 
            # for this line of the spread sheet to do some optional stuff
            if options.verbose is True: 
                dbgTable.append([fileName,lines,devObj.rtype,devName,devObj.port,devObj.canId,devObj.cardNr,devObj.chan,devObj.DESC,devObj.dbFileName])

            if options.panel is not None and len(devObj.panelName)>0: # for panel creation
                if len(devObj.panelName )>0 and not panelWidgetName:
                    warnings.append([fileName,lines,"Missing widgetName for: '"+devName+":"+devObj.signal+"' Panel: '"+devObj.panelName+"' Widget: '" +str(panelWidgetName)+"' "+argument])
                panelList.addItem(devObj.panelName,devObj.panelGroup,panelNameDict,panelDict,panelWidgetName,devObj.panelSort)

            if devObj.archPeriod is not None and len(devObj.archPeriod)>0:
                for signal in arcSignals:
                    arch.append( "<channel><name>"+devName+":"+signal+"</name><period>"+devObj.archPeriod+"</period><monitor/></channel>")

            if devObj.alhGroup is not None and len(devObj.alhGroup)>0:
                try:
                    csv2epicsFuncs.setEpicsAlh(devName,alhSignals,devObj,warnings,lines,fileName,options.cmLog)
                except ValueError as err:
                    warnings.append([fileName,lines,str(err)+": "+fileName+"'"])
        except :
            sys.stderr.write( "*********************\nPARSE EXCEPTION in file: '"+argument+"' line:"+str(lines)+" '"+str(device[0])+"', '"+str(device[1])+"', '"+str(device[2])+"'\n*********************\n" )
            raise
    IN_FILE.close()
    # end for
#########################################################################
    if options.dis: 
        (dev,sname) = epicsUtils.matchRe(options.dis,"(.*):(.*)")
    csv2epicsFuncs.PLC_Address.setupTemplates(devName,options.output_db)

# Create files

    def writeFile(outFileName,strOut):
        if outFileName == None or len(strOut) == 0:
            return
        try:
            outfile = install_path+"/"+outFileName
            OUT_FILE = open(outfile,"w") 
        except IOError: 
            epicsUtils.die("can't open output file: "+outfile)
        if options.verbose:
            print "   Creating file "+outFileName
        print >> OUT_FILE, strOut
        OUT_FILE.close()
        return

    for filename in epicsUtils.epicsTemplate.getFilenames():
        if epicsUtils.matchRe(filename,".*\.db$") is not None:
            writeFile(filename,epicsUtils.epicsTemplate.printAllRecords(filename) )
        elif epicsUtils.matchRe(filename,".*\.substitutions$") is not None:
            writeFile(filename,epicsUtils.epicsTemplate.printAllSubst(filename) )
        else:
#            pprint.pprint(epicsUtils.epicsTemplate.files)
#            print epicsUtils.epicsTemplate.getFilenames()
            warnings.append([fileName,-1,"unknown output format for file -d '"+fileName+"'"])

    if options.output_arch:
        writeFile(options.output_arch,"<group>\n<name>"+options.output_arch.replace(".arch","")+"</name>\n"+"\n".join(arch)+"\n</group>" )

    if options.output_req:
        writeFile(options.output_req,"\n".join(req) )

    if (options.output_alh is True) or (options.cmLog is True):
        epicsUtils.epicsAlh.printFiles(install_path,1)
    elif options.output_alh_no_group is True:
        epicsUtils.epicsAlh.printFiles(install_path)
        
    if options.verbose is True:
        epicsUtils.printTable(dbgTable,["Source File","line","record","devName","Port","Addr/Id","Card","Chan","DESC","Out File"],1 ) 

    if options.panel is not None:  # for panel creation panelInfos->{recordType}->[pv1, pv2...
        panelList.printAll()

    if len(warnings) > 0:
        sys.stderr.write( "\nWARNINGS\n********\n\n" )
        epicsUtils.printTable(warnings, ["file","line","Warning","PV-Name","Value"])
        sys.stderr.write( "\n" )

