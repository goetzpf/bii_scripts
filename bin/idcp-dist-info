#!/bin/bash

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Goetz Pfeiffer <Goetz.Pfeiffer@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

CONFIGFILE_PATH=/opt/OPI/idcp

CONFIGFILE_BII=$CONFIGFILE_PATH/rsync-dist.config.BII
CONFIGFILE_MLS=$CONFIGFILE_PATH/rsync-dist.config.MLS

CONFIGFILE=$CONFIGFILE_BII

function print_short_help {
    echo "$0: a small wrapper that calls rsync-dist-info.py"
    echo "options:"
    echo "  -h: this help"
    echo "  -H: this text PLUS the help from rsync-dist-info.py"
    echo "  --id [ID] : filter for this insertion device"
    echo "  --ids : filter for all ID's that are installed and use"
    echo "      the rsync-dist.pl (Ue56/2 is not in this list)"
    echo "  --id-list : show the known insertion devices and their idcp-name"
    echo "  --facility [FACILITY]: set the facility, facility may"
    echo "      be 'bii' (default) or 'mls'"
    echo "  --dry-run : just show how rsync-dist-info.py would be called"
}

function print_long_help {
    print_short_help
    echo 
    echo "the following options are known to rsync-dist-info.py and can "
    echo "also be used here:"
    echo
    rsync-dist-info.py -h
}

function list_ids {
    iddb -a idcp
    exit 0
}

facility="bii"
dryrun=""
realargs="$@"
while [ $# -gt 0 ]; do
    case "$1" in
      -h)
        print_short_help
        exit 0
        ;;
      -H)
        print_long_help
        exit 0
        ;;
      --id-list)
        iddb -a idcp
        exit 0
        ;;
      --id)
        prefix=$(iddb prefix "$2" 2>/dev/null)
        if [ $? -ne 0 ]; then
            echo "unknown ID:$2 ('iddb $2' returned an error)"
            exit 1
        fi
        opts="$opts --filter-names $prefix"
        shift
        ;;
      --idcp)
        opts="$opts --filter-names idcp$2"
        shift
        ;;
      --ids)
        ids_par_given="yes"
        ;;
      -n| --names| -v| --versions| -l| --lifetimes| --idle| --boot-times| --version-info)
        saveme="$saveme $1"
        cmd_given="yes"
        ;;
      --last)
        saveme="$saveme $1 $2"
        shift
        last_given="yes"
        ;;
      --facility)
        facility="no"
        if [ "$2" = "bii" ]; then
            facility="$2"
        fi
        if [ "$2" = "mls" ]; then
            facility="$2"
            CONFIGFILE=$CONFIGFILE_MLS
        fi
        if [ "$facility" = "no" ]; then
            echo "unknown faciliy: $2"
            exit 1
        fi
        shift
        ;;
      --dry-run)
        dryrun="yes"
        ;;
      *)
        saveme="$saveme $1"
        #break 2
        ;;
    esac
    shift
done

if [[ -n "$ids_par_given" ]]; then
    # facility in upper-case:
    fct=${facility^^} 
    installed_ids=$(iddb -a idcp -g $fct -s installed list prefix --no-heading | xargs | sed -e 's/ /,/g')
    opts="$opts --filter-names $installed_ids"
fi

opts="$opts -c $CONFIGFILE"

if [[ -z "$cmd_given" ]]; then
    opts="$opts -n"
fi
if [[ -z "$last_given" ]]; then
    opts="$opts --last 10"
fi

opts="$opts $saveme"

#set -- $realargs

#echo saved word: $saveme
#echo run real command: "$@"
#echo "opts: $opts"
if [[ -z "$dryrun" ]]; then
    rsync-dist-info.py $opts
else
    echo "rsync-dist-info.py $opts"
fi

