#!/bin/bash

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Goetz Pfeiffer <Goetz.Pfeiffer@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

#shopt -s nocasematch

SCRIPT_FULL_NAME=$(readlink -e $0)
MYDIR=$(dirname $SCRIPT_FULL_NAME)
MYNAME=$(basename $SCRIPT_FULL_NAME)
TOP=$(readlink -e $MYDIR/..)
# TOP needed for default bii_scripts.config

facility_uc="BII"
show_versions="no"
names=""
list_links="no"
verbose=""
dryrun=""
names_rx=""

cmdret=""

function CMD {
    # $1: command
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "$1"
    fi
    if [ -z "$dryrun" ]; then
        bash -c "$1"
        cmdret=$?
    else
        cmdret=0
    fi
}

function print_short_help {
    echo "$MYNAME: a small wrapper that calls rsync-dist-info.py"
    echo
    echo "usage: $MYNAME [OPTIONS] [ID]"
    echo
    echo "options:"
    echo "  -h: this help"
    echo "  --help: this text PLUS the help from rsync-dist-info.py"
    echo "  --id [ID] : filter for this insertion device"
    echo "  --ids : filter for all ID's that are installed at"
    echo "      the given FACILITY."
    echo "  -v --versions : order results by version"
    echo "  -V --version VERSION : show information for VERSION"
    echo "  --version-info VERSION : show log information for VERSION"
    echo "  --id-list : show the known insertion devices and their idcp-name"
    echo "  --list : just list the link names"
    echo "  --active : show information on all active versions"
    echo "  -f --facility [FACILITY]: set the facility, facility may"
    echo "      be 'bii' (default) or 'mls'"
    echo "  -b --brief: pass --brief option to rsync-dist-info.py"
    echo "  --idnames : show insertion device names instead of link names."
    echo "  --verbose: show executed command"
    echo "  --dry-run : just show how rsync-dist-info.py would be called"
    echo 
    echo "Examples:"
    echo "  $MYNAME [name]"
    echo "      shows version information for the given name (IOC)"
    echo "  $MYNAME --list"
    echo "      list all known names (IOCS)"
    echo "  $MYNAME --active"
    echo "      show all versions still in use"
    echo "  $MYNAME --version [VERSION]"
    echo "      shows links and link changes for the given version"
    echo "  $MYNAME --version-info [VERSION]"
    echo "      shows log information for the given version"
    echo "  $MYNAME --ids --active"
    echo "      shows all active versions for all IDs"
    echo "  $MYNAME --ids --active -v"
    echo "      shows all active versions for all IDs ordered by version"
    echo "  $MYNAME --ids --active -v -b"
    echo "      shows all active versions for all IDs ordered by version"
    echo "      one line per version (brief format)"
    echo "  $MYNAME --ids --active -v -b --idnames"
    echo "      shows all active versions for all IDs ordered by version"
    echo "      one line per version (brief format), ID names instead of"
    echo "      link names"
    echo 
    echo
    echo "Note: only versions that still exist on the server are shown"
}

function print_long_help {
    print_short_help
    echo 
    echo "the following options are known to rsync-dist-info.py and can "
    echo "also be used here:"
    echo
    rsync-dist-info.py -h
}

args=("$@")
while true; do
    case "$1" in
      -h)
        print_short_help
        exit 0
        ;;
      --help)
        print_long_help
        exit 0
        ;;
      --id-list)
        iddb -a idcp
        exit 0
        ;;
      --list)
        list_links="yes"
        shift
        ;;
      --id)
        prefix=$(iddb prefix "$2" 2>/dev/null)
        if [ $? -ne 0 ]; then
            echo "unknown ID:$2 ('iddb $2' returned an error)"
            exit 1
        fi
        opts="$opts --filter-names $prefix"
        shift 2
        ;;
      -V| --version)
        opts="$opts --filter-version $2"
        shift 2
        ;;
      --ids)
        ids_par_given="yes"
        shift
        ;;
      -b| --brief)
        brief_given="yes"
        shift
        ;;
      -n| --names| -l| --lifetimes| --idle| --boot-times)
        saveme="$saveme $1"
        cmd_given="yes"
        shift
        ;;
      -v| --versions)
        saveme="$saveme $1"
        show_versions="yes"
        cmd_given="yes"
        shift
        ;;
      --version-info)
        saveme="$saveme $1 $2"
        cmd_given="yes"
        shift 2
        ;;
      --filter-names| --filter-names-rx| --filter-versions| --filter-inactive-since)
        saveme="$saveme $1 $2"
        shift 2
        ;;
      --filter-lifetime-smaller| --filter-lifetime-bigger| --fallback-info)
        saveme="$saveme $1 $2"
        shift 2
        ;;
      --active)
        saveme="$saveme -v --filter-active"
        cmd_given="yes"
        shift
        ;;
      --last)
        saveme="$saveme $1 $2"
        last_given="yes"
        shift 2
        ;;
      -f| --facility)
        facility_uc="no"
        if [ "$2" = "bii" ]; then
            facility_uc="BII"
        fi
        if [ "$2" = "mls" ]; then
            facility_uc="MLS"
        fi
        if [ "$facility_uc" = "no" ]; then
            echo "unknown facility: $2"
            exit 1
        fi
        shift 2
        ;;
      --idnames)
        names_rx=$(iddb -a idcp list prefix name -N | sed -e 's/^\([^ ]\+\) \+\([^ ]\+\).*/s#\\<\1\\>#\2#;/' | paste -sd "")
        shift
        ;;
      --verbose)
        verbose="yes"
        shift
        ;;
      --dry-run)
        dryrun="yes"
        shift
        ;;
      -- ) shift; break ;;
      *)
        if [ -z "$1" ]; then
            break;
        fi
        if [[ $1 =~ ^- ]]; then
            # it's an option to be passed to rsync-dist-info.py: 
            saveme="$saveme $1"
        else
            names="$names $1"
        fi
        shift
        ;;
    esac
done

# read bii_scripts configuration variables:
if [ -e $MYDIR/bii_scripts.config ]; then
    . $MYDIR/bii_scripts.config
else
    echo "error, file bii_scripts.config not found" >&2
    exit
fi

# The share directory is defined by SHARE_INSTALL_DIR from file 
# bii_scripts.config:
BII_SCRIPTS_SHARE_DIR="$SHARE_INSTALL_DIR"

CONFIGFILE_PATH=$BII_SCRIPTS_SHARE_DIR/bii_scripts/rsync-dist 

facility=$(echo "$facility_uc" | tr '[:upper:]' '[:lower:]')

configfile="$CONFIGFILE_PATH/idcp-$facility"

opts="$opts -c $configfile --filter-existent"

if [ $list_links = "yes" ]; then
    opts="$opts -n -b"
fi

if [[ -n "$ids_par_given" ]]; then
    # facility must be in upper-case:
    installed_ids=$(iddb -a idcp -g $facility_uc -s installed list prefix --no-heading | xargs | sed -e 's/ /,/g')
    opts="$opts --filter-names $installed_ids"
fi

if [[ -z "$cmd_given" ]]; then
    opts="$opts -n"
fi
if [[ -z "$last_given" ]]; then
    opts="$opts --last 10"
fi
if [[ -n "$brief_given" ]]; then
    opts="$opts -b"
fi

if [ -n "$names" ]; then
    names_list=$(echo $names | xargs iddb prefix | sed -e 's/ \+/,/g')
    if [ $show_versions = "no" ]; then
        opts="$opts --filter-names $names_list"
    else
        opts="$opts --filter-versions $names_list"
    fi
fi

opts="$opts $saveme"

#set -- $realargs

#echo saved word: $saveme
#echo run real command: "$@"
#echo "opts: $opts"
cmd="rsync-dist-info.py $opts"
if [ -n "$names_rx" ]; then
    cmd="$cmd | sed -e \"$names_rx\""
fi

CMD "$cmd"

