#!/usr/bin/zsh -f

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Thomas Birke <Thomas.Birke@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

env >/tmp/cmdOnIOCs.$$

progname=$0

usage() {
    echo -n $2 >&2
<<EOF
Usage: $progname [-n] [-f] [-s seconds] [-e escape] -p passwd (-i iocsglob|-I iocsregex) cmd [iocs]

  -n          : no-exec - just print what would be executed without giving "-n"
  -s seconds  : sleep   - sleeptime after sending the command to an ioc (default: 1)
  -e escape   : escape  - escapechars for 'console' (default: XX)
                          must be changed, if XX is part of the command
  -p passwd   : passwd  - console-password to access ioc
  -i glob     : iocs    - space separated list of glob-patterns matching ioc-names
  -I regex    : iocs    - space separated list of regexps matching ioc-names
  cmd         : command - the actual command to execute on each matching ioc (single argument!)
  iocs        : iocs    - simple list of iocnames (overrides -i and -I!)

A simple list of space-separated IOC-names is perfectly OK for both -i and -I...
EOF

   exit $1
}
[[ "$*" = "" ]] && usage 0

zparseopts -D -A args -- I: i: s: e: p: f n

noexec=0; force=0
[[ ${(k)args} = *"n"* ]] && noexec=1
iocsglob=${args[-i]-xxx}
iocsre=${args[-I]-xxx}
sleep=${args[-s]-1}
password=${args[-p]-xxx}
esc=${args[-e]-XX}

cmd=$1; shift

if [[ $# == 0 && $iocsre = "xxx" && $iocsglob = "xxx" ]]; then
    usage 1 "ERROR: No IOCs specified.\n\n"
fi
if [[ $password = "xxx" ]]; then
    usage 1 "ERROR: Password has to be provided!\n\n"
fi

[[ $iocsre = "xxx" ]] && iocsre=".*" && iocsglob=${(j:|:)${=iocsglob}}
[[ $iocsglob = "xxx" ]] && iocsglob="*" && iocsre=${(j:|:)${=iocsre}}

iocpattern='.'
host=$(hostname -f)
[[ $host = *".erl.site" ]] && iocpattern='f$'
[[ $host = *".ctl.bessy.de" ]] && iocpattern='^(eis|mdi|ioc|sioc).*[bgc]$'
[[ $host = *".mlscs.bessy.de" ]] && iocpattern='p$'

if [[ $# > 0 ]]; then
  iocsglob=${(j:|:)${=@}}
fi

iocs=()
if [[ -e /opt/IOC/log/IOCs.list ]]
then
  for ioc in `egrep $iocpattern </opt/IOC/log/IOCs.list | sort | egrep ^\($iocsre\)$`
  do
    [[ "$ioc" = ${~iocsglob} ]] && iocs=($iocs $ioc)
  done
else
  for ioc in `echo tsc | perl -e 'alarm shift @ARGV; exec @ARGV' 1 console -u 2>/dev/null |awk '{print $1}' | egrep $iocpattern | sort | egrep ^\($iocsre\)$`
  do
    [[ "$ioc" = ${~iocsglob} ]] && iocs=($iocs $ioc)
  done
fi

if [[ $#iocs = 0 ]]; then
    usage 1 "ERROR: No matching IOCs found\n\n"
fi

if [[ $noexec == 0 && $force == 0 ]]; then
    numiocs=$#iocs
    if [[ numiocs -gt 1 ]]
    then
        echo "Execute command\n\t$cmd\non the following $numiocs IOCs:"
        print -oc $iocs
        echo -n "\nIs that what you really want? (y/N) "
    else
        echo -n "Execute command\n\t$cmd\non IOC $iocs\n\nIs that what you really want? (y/N) "
    fi
    read ans
    [[ $ans:u != "Y" ]] && exit 0
fi

for ioc in $iocs
do
    icmd=`echo $cmd | sed -e "s/%i/$ioc/g" -e "s/%I/$ioc:u/g"`
    if [[ $noexec == 1 ]]; then
        <<EOF
(echo "$password"; sleep 1; echo $icmd:q; sleep $sleep; echo "${esc}.") | console -f -e "$esc" $ioc;
EOF
    else
        (echo "$password"; sleep 1; echo $icmd; sleep $sleep; echo "${esc}.") | console -f -e "$esc" $ioc;
    fi
done
