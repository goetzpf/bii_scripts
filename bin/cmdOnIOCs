#!/usr/bin/zsh -f

usage() {
<<EOF
Usage: cmdOnIOCs [-n] [-f] [-s seconds] [-e escape] -p passwd (-i iocsglob|-I iocsregex) cmd [iocs]

  -n          : no-exec - just print what would be executed without giving "-n"
  -f          : force   - skip the "do you really..." part, just do it
  -s seconds  : sleep   - sleeptime after sending the command to an ioc (default: 1)
  -e escape   : escape  - escapechars for 'console' (default: XX)
                          must be changed, if XX is part of the command
  -p passwd   : passwd  - console-password to access ioc
  -i glob     : iocs    - space separated list of glob-patterns matching ioc-names
  -I regex    : iocs    - space separated list of regexps matching ioc-names
  cmd         : command - the actual command to execute on each matching ioc (single argument!)
  iocs        : iocs    - simple list of iocnames (overrides -i and -I!)

A simple list of space-separated IOC-names is perfectly OK for both -i and -I...
EOF

  exit $1
}
[[ "$*" = "" ]] && usage 0

zparseopts -D -A args -- I: i: s: e: p: f n

noexec=0; force=0
[[ ${(k)args} = *"n"* ]] && noexec=1
[[ ${(k)args} = *"f"* ]] && force=1
iocsglob=${args[-i]-xxx}
iocsre=${args[-I]-xxx}
sleep=${args[-s]-1}
password=${args[-p]-xxx}
esc=${args[-e]-XX}

cmd=$1; shift

if [[ $# == 0 && $iocsre = "xxx" && $iocsglob = "xxx" ]]; then
  echo "ERROR: No IOCs specified.\n" >&2
  usage 1
fi
if [[ $password = "xxx" ]]; then
  echo "ERROR: Password has to be provided!\n" >&2
  usage 1
fi

[[ $iocsre = "xxx" ]] && iocsre=".*" && iocsglob=${(j:|:)${=iocsglob}}
[[ $iocsglob = "xxx" ]] && iocsglob="*" && iocsre=${(j:|:)${=iocsre}}

if [[ $# > 0 ]]; then
  iocs=("$@")
else
  iocs=()
  foreach ioc (`echo tsc | console -u 2>/dev/null |awk '{print $1}' | sort | egrep ^\($iocsre\)$`)
    [[ "$ioc" = ${~iocsglob} ]] && iocs=($iocs $ioc)
  end
fi

if [[ $#iocs = 0 ]]; then
  echo "ERROR: No matching IOCs found\n" >&2
  usage 1
fi

if [[ $noexec == 0 && $force == 0 ]]; then
  echo -n "Execute command\n\t$cmd\non IOCs\n\t$iocs\n\nIs that what you really want? (y/N)"
  read ans
  [[ $ans:u != "Y" ]] && exit 0
fi

foreach ioc ($iocs)
  if [[ $noexec == 1 ]]; then
<<EOF
    (echo "$password"; sleep 1; echo $cmd; sleep $sleep; echo "${esc}.") | console -f -e "$esc" $ioc;
EOF
  else
    (echo "$password"; sleep 1; echo $cmd; sleep $sleep; echo "${esc}.") | console -f -e "$esc" $ioc;
  fi
end
