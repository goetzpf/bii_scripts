#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- python -*-

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Thomas Birke <Thomas.Birke@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
from glob import glob
import re
import argparse

assert sys.version_info[0]==3

parser = argparse.ArgumentParser('pvgrep')
parser.add_argument('regexp', nargs=1, help='regexp to match PVnames')
parser.add_argument('-ext', default='dbl', help='file-extension to search')
parser.add_argument('-flat', default=False, action='store_true', help='output is flat PV list')
parser.add_argument('-i', default=False, action='store_true', help='match case insensitive')
parser.add_argument('-ioc', default='*', help='glob pattern to match iocs to search')

args = parser.parse_args()

os.chdir('/opt/IOC/log/Database')


def insensitive_glob(pattern):
    return glob(''.join(
        map(lambda c: '[%s%s]' % (c.lower(), c.upper()) if c.isalpha() else c, pattern)))


ioclist = insensitive_glob("*/"+args.ioc+"."+args.ext) + \
          insensitive_glob("*/"+args.ioc+"_"+args.ext+".txt")

if len(ioclist) == 0:
    ioclist = insensitive_glob(args.ioc+"."+args.ext) + \
              insensitive_glob(args.ioc+"_"+args.ext+".txt")

regexp = args.regexp[0]
if not regexp.startswith('^'):
    regexp = ".*" + regexp

frex = re.compile('[._]%s.*' % args.ext)
rex = re.compile(regexp, re.IGNORECASE if args.i else 0)
iocs = {}

for fn in ioclist:
    ioc = frex.split(fn)[0]
    with open(fn) as fh:
        for line in fh.readlines():
            l = line.strip()
            if rex.match(l):
                iocs[ioc] = iocs.get(ioc, []) + [l]

for ioc in sorted(iocs.keys()):
    if not args.flat:
        print(ioc+':')
    for pv in sorted(iocs[ioc]):
        print(pv if args.flat else '\t'+pv)
