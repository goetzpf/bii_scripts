#!/usr/bin/env python2
# -*- coding: UTF-8 -*-

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Bernhard Kuner <bernhard.kuner@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from string import Template

assert sys.version_info[0]==2

def dictArgStr(argDict): 
    if isinstance(argDict,dict): 
    	return ",".join( map(lambda x: str(x)+"="+str(argDict[x]), sorted(argDict.keys())))

def DriverInit(driverInit):
    return reduce(lambda a,x: a+"\n# "+x['DESC']+"\n"+x['CMD']+"\n",driverInit,"")

def LoadRecords(loadRecords):
    return reduce(lambda a,x: a+"\n# Load "+x['DESC']+" database (flat)\n"+\
    	    "dbLoadRecords(\""+x['DB']+".db\""+ (", \""+(dictArgStr(x['SUBST'])+"\"") if x.has_key('SUBST') else "")+")\n",\
	    loadRecords,"")
def Restore(restore):
    return reduce(lambda a,x: a+"\n# Restore channels for "+x['SAV']+" during pass "+str(x['PASS'])+"\n"+\
    	"set_pass"+str(x['PASS'])+"_restoreFile(\""+x['SAV']+".sav\""+\
	(dictArgStr(x['SUBST']) if x.has_key('SUBST') else "")+")\n",\
	restore,"")

def Seq(seq):
    return  reduce(lambda a,x: a+"\n# "+x['DESC']+" State Machine\n"+\
    	"seq &"+x['ST']+", \""+(dictArgStr(x['SUBST']) if x.has_key('SUBST') else "")+"\"\n",\
	seq,"")

def Request(request):
    return reduce(lambda a,x: a+"\n# Auto-save channels for "+str(x['REQ'])+" every "+str(x['RATE'])+" seconds\n"+
    	    	"create_monitor_set(\""+str(x['REQ'])+".req\", "+str(x['RATE'])+(dictArgStr(x['SUBST']) if x.has_key('SUBST') else "")+")\n",\
		request,"")

sys.path.insert(0,'.')
sys.path.insert(0,'..')
args = {}
for a in sys.argv[1:]:
    (n,v) = a.split('=')
    args[n]=v

__import__(args['IOC']).getArgs(args)

printArgs = {
    'IOC'           : args['IOC'],
    'DB_LOG_DIR'    : args['DB_LOG_DIR'],
    'SUPPORT'       : args['SUPPORT'],
    'ASCF'          : args['ASCF'],
    'version_USE'   : args['version']['USE'],
    'autosave_SAV_DIR': args['autosave']['SAV_DIR'],
    'autosave_REQ_DIR': args['autosave']['REQ_DIR'],
    'autosave_CREATE_DATED_BACKUPS'      : args['autosave']['CREATE_DATED_BACKUPS'],
    'caPutLog_USE'  : args['caPutLog']['USE'],
    'caPutLog_HOST' : args['caPutLog']['HOST'],
    'nfs_HOST'          : args['nfs']['HOST'],
    'nfs_USE'       : args['nfs']['USE'],
    'nfs_UID'	    : args['nfs']['UID'],
    'nfs_GID'	    : args['nfs']['GID'],
    'ROUTER'        : args['ROUTER'],
    'DEFAULTROUTER' : args['DEFAULTROUTER'],
    'iocLog_DISABLE': args['iocLog']['DISABLE'],
    'iocLog_HOST'   : args['iocLog']['HOST'],
    'loadRecords'   : LoadRecords(args['loadRecords']),
    'request'	    : Request(args['request']),
    'seq'	    : Seq(args['seq']),
    'restore'	    : Restore(args['restore']),
    'driverInit'    : DriverInit(args['driverInit'])
}

stCmdStr = Template("""# vxWorks Startup File for ${IOC}
#
# This file was generated and should NOT be modified by hand!!!
#
############################################################# Network Settings

# Enable route to trs
routeAdd "$DEFAULTROUTER", "$ROUTER"

# Add NFS host entry
${nfs_USE}hostAdd "nfshost", "$nfs_HOST"
${nfs_USE}nfsAuthUnixSet "nfshost", $nfs_UID, $nfs_GID, 0, 0

# Mount "/opt/epics", "/opt/IOC" and "/opt/IOC/log" explicitly
${nfs_USE}nfsMount "nfshost", "/opt/IOC", "/opt/IOC"
${nfs_USE}nfsMount "nfshost", "/srv/IOC_log", "/srv/IOC_log"

# Log Servers
putenv "EPICS_IOC_LOG_INET=$iocLog_HOST"
${caPutLog_USE}putenv "EPICS_CA_PUT_LOG_INET=$caPutLog_HOST"

################################################################# Version Info

pwd >$DB_LOG_DIR/$IOC.pwd
${version_USE}copy "../version", "$DB_LOG_DIR/$IOC.version"

pwd
${version_USE}copy "../version"

################################################################ Load Binaries

# Change dir to TOP/bin/<target_arch>
cd "../../bin"
cd epicsUsrOsTargetName()

ld < $SUPPORT

######################################################## Driver Initialization

$driverInit
################################################ AutoSaveRestore Configuration

# Set directory for request files
set_requestfile_path("$autosave_REQ_DIR")

# Set directory for restore files
set_savefile_path("$autosave_SAV_DIR")

# Should dated backups of restore files be created?
save_restoreSet_DatedBackupFiles($autosave_CREATE_DATED_BACKUPS)

# Do not use status PVs
save_restoreUseStatusPVs = 0

#################################################### Load Database Definitions

cd "../../dbd"

dbLoadDatabase("$IOC.dbd")
${IOC}_registerRecordDeviceDriver(pdbbase)

############################################################### Load Databases

cd "../db"

$loadRecords
############################################################# Autosave Restore

$restore
########################################################### Configure IOC Core

# IOC Log Server Connection (0=enabled, 1=disabled)
iocLogDisable=$iocLog_DISABLE

# Set Access Security
asSetFilename("$ASCF")

################################################################## Ignition...

# Initialize EPICS Core
iocInit

# Report Installed and Configured I/O-Hardware Information
dbior 0, 1 > $DB_LOG_DIR/$IOC.dbior
dbhcr      > $DB_LOG_DIR/$IOC.dbhcr
dbl        > $DB_LOG_DIR/$IOC.dbl

############################################################### State Machines

$seq
#################################################################### Post Init

# Start caPutLogging
${caPutLog_USE}caPutLogInit(getenv("EPICS_CA_PUT_LOG_INET"), 1)

############################################################# Autosave Request

$request
""")

print stCmdStr.substitute(printArgs)
