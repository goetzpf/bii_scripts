#!/usr/bin/python2
# -*- coding: UTF-8 -*-

# Copyright 2015 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Thomas Birke <Thomas.Birke@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import sys, os, socket, re

my_version = "0.3"

(fqdn, hostnamelist, iplist) = socket.gethostbyaddr(socket.gethostname())

atBESSY=not re.search("ctl.bessy.de", fqdn) is None
atMLS=not re.search("mlscs.bessy.de", fqdn) is None
atERL=not re.search("ctl.erl.site", fqdn) is None
atOffice=not atBESSY and not atMLS and not atERL
    
archs = []
if atOffice or atBESSY: archs += [("bii",     "archiver",       "",         "")]
if atOffice:            archs += [("mls",     "archiver",       "",         "MLS/")]
if atMLS:               archs += [("mls",     "archiver.mlscs", "",         "")]
if atOffice or atERL:   archs += [("hobicat", "archiver",       "hobicat/", "")]

facilities=", ".join([l[0] for l in archs])
n=facilities.rfind(',')
if n > 0:
    facilities=facilities[:n]+" or"+facilities[n+1:]+", default is all"
else:
    facilities=facilities+" only"

parser = OptionParser(usage="%prog [options] PV [PV ...]",
                      version="%%prog %s" % my_version,
                      description="""Retrieve archived data and present it in a camonitor-like way.""")


parser.set_defaults(start="-1d")
parser.set_defaults(end="now")
parser.set_defaults(at=None)
parser.set_defaults(glob=False)
parser.set_defaults(regexp=False)
parser.set_defaults(spreadsheet=False)
parser.set_defaults(facility=None)
parser.set_defaults(index="master_index")

parser.add_option("--start", action="store", type="string", help="start time of query (default: '-1d')", dest="start")
parser.add_option("--end",   action="store", type="string", help="end time of query   (default: 'now')",   dest="end")
parser.add_option("--at",    action="store", type="string", help="start and end time of query (default: '-1d')", dest="at")
parser.add_option("--glob", action="store_true", help="PV (only one allowed) is a glob-pattern", dest="glob")
parser.add_option("--re", action="store_true", help="PV (only one allowed) is a regexp", dest="regexp")
parser.add_option("--spreadsheet", action="store_true", help="output as spreadsheet (default: as camonitor)", dest="spreadsheet")
parser.add_option("--facility", action="store", type="string", help="facility to search (%s)" % facilities, dest="facility")
parser.add_option("--index", action="store", type="string", help="index to search (default is \"master_index\" for all useful: e.g. year_index_2013 for older data from BII)", dest="index")
(options, args) = parser.parse_args()

if len(args) == 0:
    parser.print_help()
    sys.exit(0)

if options.at is not None:
    options.start=options.at
    options.end=options.at

def encode(str):
    return str.replace(" ","+")
    
spec="&STRSTART=1&STARTSTR=%s&STREND=1&ENDSTR=%s" % (encode(options.start), encode(options.end))

if (options.glob):
    spec+="&GLOB=ON"
if (options.regexp or options.glob):
    spec+="&PATTERN=%s" % args[0]
else:
    spec+="&NAMES=%s" % "+".join(args)
    
format="camonitor"
if options.spreadsheet:
    format="Spreadsheet"
                  
wget=""
for (tag, srv, dir, pref) in archs:
    if (options.facility is None or options.facility == tag):
        wget+="wget -q -O - \"http://%s.bessy.de/%scgi/CGIExport.cgi?INDEX=/opt/Archive/%s%s&COMMAND=%s%s\";" % (srv, pref, dir, options.index, format, spec)


fltr="egrep -v -e '(Gnuplot|0000-00-00|;)' -e '^$'"
if (not options.at is None):
    fltr+=" | sed 's/ x....-..-.. ..:..:..\....... / /'"

#print wget
if options.spreadsheet:
    os.system("(%s) | %s" % (wget, fltr))
else:
    os.system("(%s) | %s | sort -b -k 2,3" % (wget, fltr))
