#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""get console files."""

# pylint: disable=invalid-name

import os
import sys
import tempfile
import glob
import shutil
import subprocess
import re


from optparse import OptionParser
# version of the program:
my_version= "1.0"

CONSERVER_URL= "http://conserver.acc.bessy.de/conserver/"

areas= { \
         "blc" :    { "description": "(also via ssh)",
                      "directory"  : "blc",
                      "ssh"        : "conservr@conserver.acc.bessy.de:/var/log/conserver/blc/",
                    },
         "id" :     { "description": "insertion devices (also via ssh)",
                      "directory"  : "id",
                      "ssh"        : "conservr@conserver.acc.bessy.de:/var/log/conserver/id/",
                    },
         "il" :     { "directory"  : "il" },
         "mono" :   { "description": "monochromators (also via ssh)",
                      "directory"  : "mono",
                      "ssh"        : "conservr@conserver.acc.bessy.de:/var/log/conserver/mono/",
                    },
         "net" :    { "directory"  : "net" },
         "psd" :    { "directory"  : "psd" },
         "tsc" :    { "description": "control system (also via ssh)",
                      "directory"  : "tsc",
                      "ssh"        : "conservr@conserver.acc.bessy.de:/var/log/conserver/tsc/",
                    },
         "tsc-mls" :{ "description": "mls control system (also via ssh)",
                      "directory"  : "conserver-mls/tsc",
                      "ssh"        : "iocadm@nfs.mlscs.bessy.de:/var/log/conserver-mls/tsc/",
                    },
         "xbpm" :   { "directory"  : "xbpm" },
       }

def syscall(args, verbose, dry_run):
    """perform system call."""
    if verbose or dry_run:
        print(" ".join(args))
    if not dry_run:
        subprocess.check_call(args)

def area_descriptions(indent):
    """return area descriptions as a string."""
    lines= []
    ind= " "*indent
    for area in sorted(areas.keys()):
        desc= areas[area].get("description")
        if desc:
            lines.append("%s%-8s : %s" % (ind, area, desc))
        else:
            lines.append("%s%s" % (ind, area))
    lines.append("")
    return "\n".join(lines)

rx_no= re.compile(r'\.([0-9]+)\s*$')

def index_from_filename(st):
    """extract the index number from a file.

    example: eis13g.log.2 returns 2
    example: eis13g.log   returns 0
    """
    m= rx_no.search(st)
    if m is None:
        return 0
    return int(m.group(1))

def new_name(filename, opt_force):
    """test if filename exists, create a new name if needed.

    If the file exists, generate a new filename FILENAME-1, FILENAME-2 until a
    name is found that doesn't exist.
    """
    if opt_force:
        return filename
    if not os.path.exists(filename):
        return filename
    cnt=1
    while True:
        n= "%s-%d" % (filename, cnt)
        if not os.path.exists(n):
            break
        cnt+=1
    return n

def fetch_files(area, glob_patterns, ssh, verbose, dry_run):
    """fetch files and put them into current working directory."""
    ssh_opt= None
    if ssh:
        ssh_opt= areas[area].get("ssh")
        if not ssh_opt:
            sys.stderr.write(("note: ssh not available for %s, using "
                              "wget instead") % area)
    if not ssh_opt:
        # @@@@ subprocess.run doesn't exist on older python (elbe) !!!
        for p in glob_patterns:
            syscall(["wget", "--quiet", "-r", "-l1", "--no-parent", "-nd",
                     CONSERVER_URL + areas[area]["directory"],
                     "-A", p],
                    verbose, dry_run)
    else:
        for p in glob_patterns:
            syscall(["scp", "-q", ssh_opt + p, "."], verbose, dry_run)

def unzip_files(verbose, dry_run):
    """unzip all files in current working directory."""
    zipped= glob.glob("*.gz")
    if zipped:
        syscall(["gunzip"] + zipped, verbose, dry_run)

def join_logfiles(filename_stem, destination, verbose, dry_run):
    """join files that start with the same characters.

    After joining, the files are removed.
    """
    sorted_files= sorted(glob.glob(filename_stem+".log*"),
                         key=index_from_filename,
                         reverse= True)
    syscall(["bash", "-c",
             "cat %s > %s" % (" ".join(sorted_files), destination)],
            verbose, dry_run)
    syscall(["rm", "-f"] + sorted_files, verbose, dry_run)

def move_files(tempdir_name, opt_force, verbose):
    """move files from tempdir to current dir."""
    found= False
    for f in glob.glob(os.path.join(tempdir_name, "*")):
        found= True
        f_base= os.path.basename(f)
        n= new_name(f_base, opt_force)
        if n!=f_base:
            sys.stderr.write(("note: created %s since %s already "
                              "existed\n") % (repr(n), repr(f_base)))
        if verbose:
            print("rename %s to %s" % (repr(f), repr(n)))
        shutil.move(f, n)
    if not found:
        sys.exit("no logfiles found, maybe the AREA is wrong "
                 "or the file doesn't exist")

def get_log_files(area, patterns, use_ssh, opt_force, verbose, dry_run, restrict):
    """get all the log files."""
    # pylint: disable=too-many-arguments
    if not patterns:
        files="*"
    elif restrict is None:
        files= [f.strip()+".log*" for f in patterns]
    else:
        extensions= [".log"] + [(".log.%d.gz" % i) for i in range(1,restrict)]
        files= [f.strip()+e for f in patterns for e in extensions]
    tempdir= tempfile.TemporaryDirectory(prefix="console-get-")
    old_dir= os.getcwd()
    if verbose:
        print("chdir to %s" % repr(tempdir.name))
    os.chdir(tempdir.name)
    fetch_files(area, files, use_ssh, verbose, dry_run)
    unzip_files(verbose, dry_run)
    for f in glob.glob("*.log"):
        stem= os.path.splitext(f)[0]
        join_logfiles(stem, stem+".sumlog", verbose, dry_run)
    if verbose:
        print("chdir to %s" % repr(old_dir))
    os.chdir(old_dir)
    move_files(tempdir.name, opt_force, verbose)
    tempdir.cleanup()

def list_files(area, use_ssh, verbose, dry_run):
    """show avaliable files."""
    ssh_opt= None
    if use_ssh:
        ssh_opt= areas[area].get("ssh")
        if not ssh_opt:
            sys.stderr.write(("note: ssh not available for %s, using "
                              "wget instead") % area)
    if not ssh_opt:
        syscall(["bash", "-c",
                 (r"wget %s -O - --quiet | sed -e 's/<[^>]*>/ /g' | "
                  r"grep '\.log ' | "
                  r"sed -e 's/^ *\([^ ]\+\).*/\1/' | sort") % \
                  (CONSERVER_URL + areas[area]["directory"])],
                verbose, dry_run)
    else:
        (ssh, dir_)= ssh_opt.split(":")
        syscall(["ssh", ssh, "cd %s && ls *.log" % dir_], verbose, dry_run)

def list_all_files(area, use_ssh, verbose, dry_run):
    """show avaliable files."""
    ssh_opt= None
    if use_ssh:
        ssh_opt= areas[area].get("ssh")
        if not ssh_opt:
            sys.stderr.write(("note: ssh not available for %s, using "
                              "wget instead") % area)

    if not ssh_opt:
        # pylint: disable=line-too-long
        syscall(["bash", "-c",
                 (r"wget %s -O - --quiet | "
                  r"sed -e 's/<[^>]*>/ /g;s/^ *\([^ ]\+\) \+\([^ ]\+\) \+\([^ ]\+\).*/\1 \2 \3/g' | "
                  r"grep : |"
                  r"column -t" ) % \
                  (CONSERVER_URL + areas[area]["directory"])],
                verbose, dry_run)
    else:
        (ssh, dir_)= ssh_opt.split(":")
        syscall(["ssh", ssh, "cd %s && ls -l --time-style=long-iso" % dir_], verbose, dry_run)


def process(options, args):
    """do all the work."""
    if not args:
        sys.exit("error: area not specified. Run '%s -h' for help" % \
                 script_shortname())
    area= args[0].strip()
    if area not in areas:
        sys.exit("error: unknown area %s. Run '%s -h' for help" % \
                 (repr(area),script_shortname()))
    if options.list:
        list_files(area, options.ssh,
                   options.verbose, options.dry_run)
    elif options.list_all:
        list_all_files(area, options.ssh,
                       options.verbose, options.dry_run)
    else:
        get_log_files(area, args[1:], options.ssh, options.force,
                      options.verbose, options.dry_run, options.restrict)

def script_shortname():
    """return the name of this script without a path component."""
    return os.path.basename(sys.argv[0])

def print_summary():
    """print a short summary of the scripts function."""
    print("%-20s: get english pronounciation info\n" % \
            script_shortname())

usage = """usage: %%prog [OPTIONS] AREA {PATTERN}
downloads and concatenates console log files"

AREA is a mandatory parameter. For each area
    there is a specific directory on the console server.
    These are the known areas:
%s
{PATTERN} is an optional parameter. If it is is given,
    only files starting with that name are processed.
    It may be a simple string or a file-glob expression.
    If {PATTERN} is omitted, all log files are processed.

examples:
    %s id eis13g
            -> get log files for eis13g
    %s id eis11*
            -> get log files whose names begin with "eis11"
    %s id eis11g* eis8g*
            -> get log files whose names begin with "eis11g" or "eis8g"
""" % tuple([area_descriptions(4)]+[script_shortname()]*3)

def main():
    """The main function.

    parse the command-line options and perform the command
    """
    # command-line options and command-line help:

    parser = OptionParser(usage=usage,
                          version="%%prog %s" % my_version)

    parser.add_option("--summary",
                      action="store_true",
                      help="print a summary of the function of the program",
                     )
    parser.add_option("--list",
                      action="store_true",
                      help="Just list available files. PATTERN is "
                           "ignored in this case."
                     )
    parser.add_option("--list-all",
                      action="store_true",
                      help="List all log files with date. PATTERN is "
                           "ignored in this case. With --ssh this also "
                           "displays the file sizes."
                     )
    parser.add_option("--ssh",
                      action="store_true",
                      help="Use ssh instead of http. Not available "
                           "for all areas.",
                     )
    parser.add_option("--force",
                      action="store_true",
                      help="Overwrite existing files.",
                     )
    parser.add_option("-v", "--verbose",
                      action="store_true",
                      help="Show executed commands.",
                     )
    parser.add_option("-n", "--dry-run",
                      action="store_true",
                      help="Show commands that would be executed.",
                     )
    parser.add_option("-r", "--restrict",
                      action="store",
                      type="int",
                      metavar="NUMBER",
                      help="Restrict to the last NUMBER log files.",
                     )
    #x= sys.argv
    (options, args) = parser.parse_args()
    # options: the options-object
    # args: list of left-over args

    if options.summary:
        print_summary()
        sys.exit(0)

    process(options, args)
    sys.exit(0)

if __name__ == "__main__":
    main()
