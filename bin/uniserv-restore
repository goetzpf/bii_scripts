#!/bin/bash

# Copyright 2021 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Goetz Pfeiffer <Goetz.Pfeiffer@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

SCRIPT_FULL_NAME=$(readlink -e $0)
MYDIR=$(dirname $SCRIPT_FULL_NAME)
MYNAME=$(basename $SCRIPT_FULL_NAME)

# Note: we override the central repo definition in the restore data with these
# directories:
UNISERV_CENTRALREPO="http://repo.acc.bessy.de/hg/id-drive/uniserv"
ID_DB_CENTRALREPO="http://repo.acc.bessy.de/hg/id_db"
verbose=""
dryrun=""

configfile=""

# directory to create:
dir=""

function CMD {
    # execute a shell command
    # arguments:
    #   $1: command
    # returns:
    #   cmdret (global variable): the return code of the command
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "$1"
    fi
    if [ -z "$dryrun" ]; then
        bash -c "$1"
        cmdret=$?
    else
        cmdret=0
    fi
}

function CMDRET {
    # execute a shell command and catch standard out
    # arguments:
    #   $1: command
    # returns:
    #   cmdret (global variable): the return code of the command
    #   cmddata (global variable): the stdout output of the command
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "$1"
    fi
    cmdret=0
    # without '|| ...' the script will exit right here
    # in case of an error:
    cmddata=$(bash -c "$1") || cmdret=$?
}

function CD {
    # change directory but not when dryrun is set
    # $1: dir
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "cd $1"
    fi
    if [ -z "$dryrun" ]; then
        cd "$1" > /dev/null
    fi
}

function print_short_help {
    echo "$MYNAME: restore a version of uniserv"
    echo "usage:"
    echo "  $MYNAME VERSION [OPTIONS]"
    echo "  Restores the source and working copy repository of an installed "
    echo "  version of the uniserv program, the motor control program used "
    echo "  by BESSY undulators."
    echo
    echo "VERSION:"
    echo "  The short version string from CONST_PROGRAM_VERSION in the uniserv"
    echo "  program that is also shown in the undulator 'DIAG' panel, "
    echo "  e.g. '1901141049'."
    echo
    echo "OPTIONS:"
    echo "  -h --help :"
    echo "      this help"
    echo "  --dir DIR :"
    echo "    Create source tree in directory DIR. Otherwise a"
    echo "    directory name is created from the VERSION string"
    echo "    in the form YYYYMMDDTHHMM."
    echo "  -c --config CONFIGFILE :"
    echo "    Specify the rsync-dist configuration file to use. If this "
    echo "    option is not givem, take the one from bii_scripts."
    echo "  -v --verbose :"
    echo "    show what the script does"
    echo "  -n --dry-run :"
    echo "    just show what the script would do"
    exit 0
}

declare -a ARGS
skip_options=""

while true; do
    case "$1" in
        -h | --help)
            print_short_help
            exit 0
            ;;
        --dir)
            dir="$2"
            shift 2
            ;;
        -c | --config)
            configfile="$2"
            shift 2
            ;;
        -v | --verbose)
            verbose="yes"
            shift
            ;;
        -n | --dry-run)
            verbose="yes"
            dryrun="yes"
            shift
            ;;
        -- )
            skip_options="yes"
            shift;
            break
            ;;
        *)
            if [ -z "$1" ]; then
                break;
            fi
            if [[ $1 =~ ^- ]]; then
                echo "unknown option: $1"
                exit 1
            fi
            ARGS+=("$1")
            shift
            ;;
    esac
done

if [ -n "$skip_options" ]; then
    while true; do
        if [ -z "$1" ]; then
            break;
        fi
        ARGS+=("$1")
        shift
    done
fi

if [ -z "$configfile" ]; then
    # Take rsync-dist config file from bii_scripts share directory.
    # read bii_scripts configuration variables:
    source $MYDIR/bii_scripts.config
    if [ $? -ne 0 ]; then
        echo "error, file bii_scripts.config not found" >&2
        exit
    fi
    # The share directory is defined by SHARE_INSTALL_DIR in file 
    # bii_scripts.config:
    CONFIGFILE_PATH=$SHARE_INSTALL_DIR/bii_scripts/rsync-dist 
    configfile="$CONFIGFILE_PATH/uniserv"
fi

# Source rsync-dist configuration file, this defines various variables, all
# named RSYNC_DIST*
source $configfile
if [ $? -ne 0 ]; then
    echo "error, couldn't read $configfile" >&2
    exit 1
fi
# take only the first rsync dist host if there is more than one:
RSYNC_DIST_HOST=$(echo $RSYNC_DIST_HOST | sed -e 's/,.*//')
RSYNC_DIST_USER=$(echo $RSYNC_DIST_USER | sed -e 's/,.*//')

SHORTVERSION="${ARGS[0]}"

if [ -z "$SHORTVERSION" ]; then
    echo "VERSION missing."
    exit 1
fi

# get rsync dist version name:
CMDRET "ssh $RSYNC_DIST_USER@$RSYNC_DIST_HOST find $RSYNC_DIST_PATH -name $SHORTVERSION | sort | tail -n 1"

if [ $cmdret -ne 0 ]; then
    echo "ssh command failed" >&2
    exit 1
fi
TAGFILE="$cmddata"

if [ -z "$TAGFILE" ]; then
    echo "error, no version found for $SHORTVERSION" >&2
    exit 1
fi

VERSION=$(echo "$TAGFILE" | sed -e "s#$RSYNC_DIST_PATH/##;s#/.*##")

QVERSION=`echo $VERSION | sed -e 's/:/\\:/g'`
if [ -z "$dir" ]; then
    MYVERSION="$SHORTVERSION"
else
    MYVERSION="$dir"
fi

if [ -d "$MYVERSION" -a -z "$dryrun" ]; then
    echo "error, directory $MYVERSION already exists"
    exit 1
fi

echo -e "* creating directory $MYVERSION"
CMD "mkdir $MYVERSION"
CD "$MYVERSION"

echo -e "* fetching hg recover files from boot directory...\n"

CMD "scp $RSYNC_DIST_USER@$RSYNC_DIST_HOST:$RSYNC_DIST_PATH/$QVERSION/recover/*recover* ."

if [ $cmdret -ne 0 ]; then 
    echo >&2
    echo "error, no restore data found for $VERSION" >&2
    exit 1
fi

echo -e "\n* recovering uniserv working directory..."
CMD "hg-recover.py --central-repo $UNISERV_CENTRALREPO -r -f uniserv-recover.tar.gz"

if [ -e "iddb-recover.tar.gz" ]; then
    CMD "hg-recover.py --central-repo $ID_DB_CENTRALREPO -r -f iddb-recover.tar.gz"
    CMD "mkdir -p uniserv/add_ons/src"
    CMD "cp -a id_db uniserv/add_ons/src"
fi

echo -e "\nversion $VERSION was restored in directory $MYVERSION"
