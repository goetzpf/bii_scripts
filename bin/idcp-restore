#!/bin/bash

# Copyright 2021 Helmholtz-Zentrum Berlin f√ºr Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# Author: Goetz Pfeiffer <Goetz.Pfeiffer@helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

SCRIPT_FULL_NAME=$(readlink -e $0)
MYDIR=$(dirname $SCRIPT_FULL_NAME)
MYNAME=$(basename $SCRIPT_FULL_NAME)

# Note: we override the central repo definition in the restore data with these
# directories:
IDCP_CENTRALREPO="http://repo.acc.bessy.de/hg/idcp/idcp"
ID_DB_CENTRALREPO="http://repo.acc.bessy.de/hg/id_db"

verbose=""
dryrun=""

# "" stands for "bii", the default
facility="bii"

# directory to create:
dir=""

function CMD {
    # execute a shell command
    # arguments:
    #   $1: command
    # returns:
    #   cmdret (global variable): the return code of the command
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "$1"
    fi
    if [ -z "$dryrun" ]; then
        bash -c "$1"
        cmdret=$?
    else
        cmdret=0
    fi
}

function CD {
    # change directory but not when dryrun is set
    # $1: dir
    if [ -n "$verbose" -o -n "$dryrun" ]; then
        echo "cd $1"
    fi
    if [ -z "$dryrun" ]; then
        cd "$1" > /dev/null
    fi
}

function print_short_help {
    echo "$MYNAME: restore a version of IDCP"
    echo "usage:"
    echo "  $MYNAME [OPTIONS] VERSION"
    echo "VERSION:"
    echo "  The ISO date string as it is used by rsync-dist. "
    echo "OPTIONS:"
    echo "  -h --help  : this help"
    echo "  --dir DIR : Create source tree in directory DIR. Otherwise a"
    echo "              directory name is created from the VERSION string"
    echo "              in the form YYYY-MM-DDTHHMMSS."
    echo "  -f --facility [FACILITY]: define facility, currently known:"
    echo "        bii      : BESSY storage ring, the default"
    echo "        mls      : MLS storage ring"
    echo "  --verbose : show executed command"
    echo "  --dry-run : just show how rsync-dist-info.py would be called"
}

declare -a ARGS
skip_options=""

while true; do
    case "$1" in
        -h | --help)
            print_short_help
            exit 0
            ;;
        --dir)
            dir="$2"
            shift 2
            ;;
        -f| --facility)
            while true; do
                if [[ $2 =~ ^bii ]]; then
                    facility="bii"
                    shift 2
                    break
                fi
                if [[ $2 =~ ^mls ]]; then
                    facility="mls"
                    shift 2
                    break
                fi
            done
            ;;
        --verbose)
            verbose="yes"
            shift
            ;;
        -n | --dry-run)
            dryrun="yes"
            shift
            ;;
        -- )
            skip_options="yes"
            shift;
            break
            ;;
        *)
            if [ -z "$1" ]; then
                break;
            fi
            if [[ $1 =~ ^- ]]; then
                echo "unknown option: $1"
                exit 1
            fi
            ARGS+=("$1")
            shift
            ;;
    esac
done

if [ -n "$skip_options" ]; then
    while true; do
        if [ -z "$1" ]; then
            break;
        fi
        ARGS+=("$1")
        shift
    done
fi

# read bii_scripts configuration variables:
source $MYDIR/bii_scripts.config
if [ $? -ne 0 ]; then
    echo "error, file bii_scripts.config not found" >&2
    exit
fi

# The share directory is defined by SHARE_INSTALL_DIR from file 
# bii_scripts.config:
BII_SCRIPTS_SHARE_DIR="$SHARE_INSTALL_DIR"

CONFIGFILE_PATH=$BII_SCRIPTS_SHARE_DIR/bii_scripts/rsync-dist 

configfile="$CONFIGFILE_PATH/idcp-$facility"

source $configfile
if [ $? -ne 0 ]; then
    echo "error, couldn't read $configfile" >&2
    exit 1
fi
# take only the first rsync dist host if there is more than one:
RSYNC_DIST_HOST=$(echo $RSYNC_DIST_HOST | sed -e 's/,.*//')
RSYNC_DIST_USER=$(echo $RSYNC_DIST_USER | sed -e 's/,.*//')

VERSION=${ARGS[0]}
if [ -z "$VERSION" ]; then
    echo "VERSION missing."
    exit 1
fi

QVERSION=`echo $VERSION | sed -e 's/:/\\:/g'`
if [ -z "$dir" ]; then
    MYVERSION=`echo $VERSION | sed -e 's/://g'`
else
    MYVERSION="$dir"
fi

if [ -d "$MYVERSION" -a -z "$dryrun" ]; then
    echo "error, directory $MYVERSION already exists"
    exit 1
fi

echo -e "* creating directory $MYVERSION"
CMD "mkdir $MYVERSION"
CD "$MYVERSION"

echo -e "* fetching hg recover files from boot directory...\n"



CMD "scp $RSYNC_DIST_USER@$RSYNC_DIST_HOST:$RSYNC_DIST_PATH/$QVERSION/dbd/hg-recover* ."
if [ $cmdret -ne 0 ]; then 
    echo >&2
    echo "error, no restore data found for $VERSION" >&2
    exit 1
fi

if [ -e hg-recover.tar.gz -a -z "$dryrun" ]
then
    # old hg-recover
    echo -e "\n* recovering idcp working directory..."
    CMD "hg-recover.py --central-repo $IDCP_CENTRALREPO -r hg-recover.tar.gz"
    CD ".."
else
    # new hg-recover with 
    # idcp_db recover information
    echo -e "\n* recovering idcp working directory..."
    CMD "hg-recover.py --central-repo $IDCP_CENTRALREPO -r -f hg-recover-idcp.tar.gz"
    # Note: in case of an error we continue here on purpose in order to at
    # least restore the id_db directory. The script does not abort in case of
    # an error due to "set +e" before.
    if [ -z "$dryrun" ]; then
        CD $(ls -d idcp*)
    else
        echo "cd idcp*"
    fi
    if [ -e ../hg-recover-idcp_db.tar.gz -a -z "$dryrun" ]; then
        # old idcp_db directory
        echo -e "* recovering idcp_db working directory..."
        CMD "hg-recover.py --central-repo $IDCP_CENTRALREPO -r -f ../hg-recover-idcp_db.tar.gz"
    fi 
    if [ -e ../hg-recover-id_db.tar.gz -o -n "$dryrun" ]; then
        # the newer version, id_db
        add_ons_used=""
        if [ -z "$dryrun" ]; then
            if grep '^\(IDCP_DATABASE\|MINISD_CACHE\).*ID_DB_DIR' config/config.template > /dev/null; then
                add_ons_used="yes"
            fi
        fi
        if [ -z "$add_ons_used" -a -z "$dryrun" ]
        then
                # id_db is placed in "idcp"
                echo -e "* recovering idcp/id_db working directory..."
                CMD "hg-recover.py --central-repo $ID_DB_CENTRALREPO -r -f ../hg-recover-id_db.tar.gz"
        else
                # id_db is placed in "idcp/add_ons/src"
                echo -e "* recovering idcp/add_ons/src/id_db working directory..."
                CMD "mkdir -p add_ons/src"
                CD "add_ons/src"
                CMD "hg-recover.py --central-repo $ID_DB_CENTRALREPO -r -f ../../../hg-recover-id_db.tar.gz"
                CD "../.."
        fi
    fi
    CD "../.."
fi
echo -e "\nversion $VERSION was restored in directory $MYVERSION"

